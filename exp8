clear all;
close all;
clc;

%% Parameters
BW = 4000;
deviation = 20;

%% Channel 1
[x, fs1] = audioread('chan1_1k_10s.wav');
Fc1 = BW * 2;
FS1 = 2.2 * Fc1;  % sampling frequency for modulation

% Resample if needed
x = resample(x, FS1, fs1);

% FM modulation manually
smod1 = my_fmmod(x, FS1, Fc1, deviation);

%% Channel 2
[x2, fs2] = audioread('chan2_1k_10s.wav');
Fc2 = BW * 4;
FS2 = 2.2 * Fc2;

% Resample
x2 = resample(x2, FS2, fs2);

% FM modulation manually
smod2 = my_fmmod(x2, FS2, Fc2, deviation);

%% Combine signals (multiplexing)
sumx = smod1 + smod2;

%% Demultiplexing - Bandpass Filter & Demodulation

% Recover channel 1
wn1 = [Fc1-200 Fc1+200];
[A1, B1] = butter(3, wn1 / (FS1/2), 'bandpass');
rec1 = filter(A1, B1, sumx);
demd1 = my_fmdemod(rec1, FS1, Fc1, deviation);
[A11, B11] = butter(2, 30 / (FS1/2), 'low');
dem1 = filter(A11, B11, demd1);

% Recover channel 2
wn2 = [Fc2-200 Fc2+200];
[A2, B2] = butter(3, wn2 / (FS2/2), 'bandpass');
rec2 = filter(A2, B2, sumx);
demd2 = my_fmdemod(rec2, FS2, Fc2, deviation);
[A22, B22] = butter(2, 25 / (FS2/2), 'low');
dem2 = filter(A22, B22, demd2);

%% Truncate to match lengths
len = min([length(x), length(dem1), length(x2), length(dem2)]);
x = x(1:len); dem1 = dem1(1:len);
x2 = x2(1:len); dem2 = dem2(1:len);
t = linspace(0, len/FS1, len);

%% Plotting - Channel 1
figure;
subplot(2,1,1); plot(t, x); title('Channel 1 - Original');
subplot(2,1,2); plot(t, dem1); title('Channel 1 - Demodulated');

figure;
plot(t, x, 'c', t, dem1, 'b--');
xlabel('Time (s)');
ylabel('Amplitude');
legend('Original Signal', 'Demodulated Signal');

%% Plotting - Channel 2
figure;
subplot(2,1,1); plot(t, x2); title('Channel 2 - Original');
subplot(2,1,2); plot(t, dem2); title('Channel 2 - Demodulated');

figure;
plot(t, x2, 'c', t, dem2, 'b--');
xlabel('Time (s)');
ylabel('Amplitude');
legend('Original Signal 2', 'Demodulated Signal 2');

%% ---------------- Local Functions ----------------

function y = my_fmmod(x, Fs, Fc, freq_dev)
    x = x(:);  % ensure column
    x_int = cumsum(x) / Fs;
    y = cos(2 * pi * Fc * (0:length(x)-1)' / Fs + 2 * pi * freq_dev * x_int);
end

function y = my_fmdemod(x, Fs, Fc, freq_dev)
    x = hilbert(x);  % analytic signal
    inst_phase = unwrap(angle(x));
    inst_freq = diff(inst_phase) * Fs / (2 * pi);
    y = [inst_freq; inst_freq(end)];  % match original length
    y = (y - Fc) / freq_dev;  % baseband signal
end
